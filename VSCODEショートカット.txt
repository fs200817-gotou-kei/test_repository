■意識すること
・javaみたいに皮から作る
・クラス分けも検討
・例外処理、コンソール
・わかりやすくする

■わかったこと
・基本となるロジックを思い描き、そのあとに例外処理的なロジックを思い描く
・基本コントロールは参照型
・ただしコントロールの変数にNothing入れれば参照先の値はそのままで変数自体にNothingを入れることができる
・exit subで対象の関数だけ抜けることができる

・usingはアンマネージリソースが正しく破棄されるように使うらしい、もしくはdisponse
→マネージリソースというのがクラスのオブジェクトが使用しているメモリのこと。
　アンマネージリソースがファイル、データベース接続、ウインドウハンドルなどマネージ
　リソース以外のリソースのこと
　アンマネージリソースは管理外のリソースのことでdb接続のopenとかcloseなど後始末のメソッドが
　用意されているものでしっかり解放してあげないとリソースがメモリ上に残ってしまうので
　パフォーマンスが下がる
　マネージリソースはガベージコレクタがメモリの開放を行ってくれるみたいだが
　なんかDisponseを呼び出して自分で開放しなければいけないみたい、一応自動でもやってくれるけど
　ガベージコレクタは適当なタイミングで開放するからしっかり適切なタイミングで開放することで
　パフォーマンスを上げようと自分で開放するためにdisponse使うってことかな？
　使いかたとしては自クラスでフィールドとかでIdisponseを実装しているオブジェクトをもつなら
　自クラスでdisponseメソッド作ってその中でフィールドのdisponseを呼び出す
　それ以外の場合は、COM(コンポーネントオブジェクトモデル←Windowsで用意されている標準的なライブラリ)
　を読んだりしない限りはIDisponseは継承しなくていい
　自クラスで開始と終了のトランザクションをペアで持つ性質がある場合は、開始をコンストラクタでInitilizeとかで
　、終了をDisposeで行うようにしてIDisposableを実装する
・disposeとusingは全部持っていて、そのうえでマネージリソースはガベージコレクションがついているから
　一応disposeとかusingしなくても削除はされはするがパフォーマンス向上のためにしっかり破棄する
・主に外部のAPIやライブラリなどのオブジェクトを使用したときにメモリの開放を注意すればよさそう

■メモ
・viewにもプログラムがあって、そこから発火はするけど内部的なロジック自体はその他クラスに任せる感じ。
　ほぼコントローラに任せて、viewは描画に必要なデータを受け取るだけのイメージ、ごちゃつくかどうかで判断するのも一つ
・controllerは画面に対応するもの作ったほうがわかりやすいよね
・viewは本当にデータをくださいとかってただcontrollerにいうのとデータをコントロールにセットする
　controllerはserviceに対してdb接続させたり、そのdbに対してクエリ出したりのロジックを書く
　serviceはcontrollerからの命令を一つ一つ例外処理なども含めこなしていく感じ
　eintitiesはdbそのものって感じで
・controllerは画面毎、serviceはentity毎
・serviceにconnect置くのがあまりしっくりこない
→serviceはdbに紐づき、controllerは画面に紐づく。それでserviceはentityを管理していて
　それに紐づくdbも管理しているからこそconnectがあるってことでいいのかな？

■vb命名規則
①変数名、関数名は大文字で始め、キャメルケースを使用する
②関数名は動詞始まり
③クラス、構造体、モジュール名、プロパティの名前はその名詞で始める
④インターフェースはIを頭につけるかインターフェースの動作を示すableをつける
⑤イベントハンドラーはイベントの種類を表す名詞で始めそのあとにEventHandlerサフィックスをつける
⑥イベント引数クラスの名前にはEventArgsサフィックスを含める
⑦イベントの前、後の概念があるときは現在形、過去形を使用する
⑧用語が長い場合は省略してもいい、ただし省略形と省略してない形は混ぜない
⑨外側のスコープ内の名前と同じ名前を内側のスコープで使用しない

■todo
・パネル追加←DB接続は一旦分ける
→データすべて取得＞readでwhile回数決定＞panel作成用のwithを呼び出し＞追加
・csv
・ストアドプロシージャー



csv書き込み
・DataFrame.WriteCsv
・GcSpreadGrid1.SaveCsv
・File.Create？
・streamWriteクラス


解析
・TextFieldParser
・streamReaderクラス
